{
  "name": "EastLang",
  "scopeName": "source.eastlang",
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#lang-constants" },
    { "include": "#const-decl" },
    { "include": "#keywords" },
    { "include": "#function-decl" },
    { "include": "#function-call" },
    { "include": "#identifiers" },
    { "include": "#operators" },
    { "include": "#punctuation" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.block.eastlang",
          "begin": "`",
          "end": "`",
          "beginCaptures": { "0": { "name": "punctuation.definition.comment.begin.eastlang" } },
          "endCaptures": { "0": { "name": "punctuation.definition.comment.end.eastlang" } },
          "patterns": []
        },
        {
          "name": "comment.line.double-slash.eastlang",
          "match": "//.*$",
          "captures": { "0": { "name": "punctuation.definition.comment.eastlang" } }
        }
      ]
    },

    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.eastlang",
          "begin": "\"",
          "end": "\"",
          "beginCaptures": { "0": { "name": "punctuation.definition.string.begin.eastlang" } },
          "endCaptures": { "0": { "name": "punctuation.definition.string.end.eastlang" } },
          "patterns": [
            { "name": "constant.character.escape.eastlang", "match": "\\\\[nrtv\"'\\\\]" },
            { "name": "invalid.illegal.newline-in-string.eastlang", "match": "\\n" }
          ]
        },
        {
          "name": "string.quoted.single.eastlang",
          "begin": "'",
          "end": "'",
          "beginCaptures": { "0": { "name": "punctuation.definition.string.begin.eastlang" } },
          "endCaptures": { "0": { "name": "punctuation.definition.string.end.eastlang" } },
          "patterns": [
            { "name": "constant.character.escape.eastlang", "match": "\\\\[nrt\"'\\\\]" }
          ]
        }
      ]
    },

    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.number.eastlang",
          "match": "\\b[0-9]+\\.?[0-9]*\\b"
        }
      ]
    },

    "lang-constants": {
      "patterns": [
        {
          "name": "constant.language.eastlang",
          "match": "\\b(true|false|empty|pi|e)\\b",
          "captures": {
            "1": { "name": "storage.modifier.const.eastlang" }
          }
        }
      ]
    },

    "const-decl": {
      "patterns": [
        {
          "name": "meta.const-declaration.eastlang",
          "begin": "(const)\\s+\\b([A-Za-z_][A-Za-z0-9_]*)\\b",
          "beginCaptures": {
            "1": { "name": "keyword.control.eastlang" },
            "2": { "name": "storage.modifier.const.eastlang" }
          },
          "end": "=",
          "patterns": []
        }
      ]
    },

    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.eastlang",
          "match": "\\b(?:const|callable|if|else|while|break|continue|and|or|xor)\\b"
        },
        {
          "name": "storage.modifier.eastlang",
          "match": "\\b(?:const)\\b"
        }
      ]
    },

    "types": {
      "patterns": [
        {
          "name": "support.type.eastlang",
          "match": "\\b(?:number|string|bool|void)\\b"
        }
      ]
    },

    "function-decl": {
      "patterns": [
        {
          "name": "meta.function.declaration.eastlang",
          "begin": "\\b(callable)\\b\\s*(?=\\()",
          "beginCaptures": {
            "1": { "name": "keyword.declaration.function.eastlang" }
          },
          "end": "(?=\\{)",
          "patterns": [
            {
              "name": "meta.function.parameters.eastlang",
              "begin": "\\(",
              "beginCaptures": { "0": { "name": "punctuation.definition.parameters.begin.eastlang" } },
              "end": "\\)",
              "endCaptures": { "0": { "name": "punctuation.definition.parameters.end.eastlang" } },
              "patterns": [
                {
                  "name": "variable.parameter.eastlang",
                  "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b"
                },
                { "name": "punctuation.separator.parameter.eastlang", "match": "," }
              ]
            }
          ]
        }
      ]
    },

    "function-call": {
      "patterns": [
        {
          "name": "meta.function-call.eastlang",
          "match": "\\b([A-Za-z_][A-Za-z0-9_]*)\\s*(?=\\()",
          "captures": { "1": { "name": "entity.name.function.eastlang" } }
        },
        {
          "name": "meta.function-call.arguments.eastlang",
          "begin": "\\(",
          "beginCaptures": { "0": { "name": "punctuation.definition.arguments.begin.eastlang" } },
          "end": "\\)",
          "endCaptures": { "0": { "name": "punctuation.definition.arguments.end.eastlang" } },
          "patterns": [
            { "include": "#keywords" },
            { "include": "#lang-constants" },
            { "include": "#strings" },
            { "include": "#numbers" },
            { "include": "#identifiers" },
            { "name": "punctuation.separator.argument.eastlang", "match": "," }
          ]
        }
      ]
    },

    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.eastlang",
          "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b"
        }
      ]
    },

    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.eastlang",
          "match": "(?:\\+|\\-|\\*|\\/|%|==|!=|<=|>=|<|>|=)"
        }
      ]
    },

    "punctuation": {
      "patterns": [
        { "name": "punctuation.section.block.begin.eastlang", "match": "\\{" },
        { "name": "punctuation.section.block.end.eastlang", "match": "\\}" },
        { "name": "punctuation.parenthesis.begin.eastlang", "match": "\\(" },
        { "name": "punctuation.parenthesis.end.eastlang", "match": "\\)" },
        { "name": "punctuation.separator.comma.eastlang", "match": "," }
      ]
    }
  },
  "scope": "source.eastlang",
  "fileTypes": ["eastlang", "el"]
}
